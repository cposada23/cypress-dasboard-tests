name: Cypress tests

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      project-id:
        required: true
        type: string
      env-url:
        required: true
        type: string
    secrets:
      CYPRESS_RECORD_KEY:
        required: true

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    outputs:
      dashboardUrl: ${{steps.cypress-tests.outputs.dashboardUrl}}
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run #of copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install
        run: yarn
      - name: Code style
        run: yarn lint
      - name: setupEnvs
        id: envs
        working-directory: ./cypress
        run: |
          echo "::set-output name=number::hiku"
          cypress='hola'
          echo "::set-output name=ORG_ID::${cypress}"
          echo "::set-output name=projectId::${{ inputs.project-id }}"
      - name: UI E2E Tests
        uses: cypress-io/github-action@v4
        id: cypress-tests
        continue-on-error: true
        env:
          SUMMARY_ENV_VAR: false
          CYPRESS_apiPort: 4222
          CYPRESS_container: ${{ matrix.containers }}
          CYPRESS_USER: 'HEHEHEHEHE'
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_NUMBER: ${{steps.envs.outputs.number}}
          CYPRESS_ORG_ID: ${{steps.envs.outputs.ORG_ID}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_TEST: 9876
          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}
          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}
        with:
          config-file: cypress.config.ts
          install-command: yarn --immutable
          browser: chrome
          headless: true
          record: true
          parallel: true
          group: 'Runs'
          config: baseUrl=${{ inputs.env-url }},projectId=${{ inputs.project-id }}
      - name: save artifacts for notification job
        uses: actions/upload-artifact@v3
        if: steps.cypress-tests.outcome == 'failure'
        with:
          name: mochawesome
          path: cypress/results

  teams-notifications:
    runs-on: ubuntu-latest
    name: Test Results
    needs: [cypress-run]
    steps:
      - uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: mochawesome
          path: artifact/
      - run: ls -R
      - uses: actions/github-script@v6
        id: generate-output
        with:
          script: |
            const fs = require('fs');
            let template = `
            <table>
              <tr>
                <th>Spec File</th>
                <th>Passed :white_check_mark:</th>
                <th>Failed :x:</th>
                <th>Skipped :leftwards_arrow_with_hook:</th>
              </tr>
              <tr>
                <td>%spec-file%</td>
                <td>%passed%</td>
                <td>%failed%</td>
                <td>%skipped%</td>
              </tr>
            </table>
            `
            let result = '<h2>Cypress Results</h2>';
            try {
              // If there is files here is because a test failed
              const files = fs.readdirSync('./artifact');
              files.forEach(file => {
                console.log(`File: ${file}`);
                const jsonFile = JSON.parse(fs.readFileSync(`./artifact/${file}`));
                const spec = jsonFile['results'][0]['file'];
                const failures = (jsonFile['results'][0]['suites'][0]['failures']).length;
                if(failures > 0) {
                  const passes = (jsonFile['results'][0]['suites'][0]['passes']).length;
                  const skipped = (jsonFile['results'][0]['suites'][0]['skipped']).length;
                  result += template
                            .replace('%spec-file%', spec)
                            .replace('%passed%', passes)
                            .replace('%failed%', failures)
                            .replace('%skipped%', skipped);
                }  
              });
            } catch (error) {
              console.error(error);
              result += '<br><h3>Passed :white_check_mark:</h3>';
            }
            return result.replace(/[\r\n]/gm, '');
          result-encoding: string
      - name: generate summary
        run: |
          echo "CYPRESS DASHBOARD: ${{needs.cypress-run.outputs.dashboardUrl}}"
          echo -e "${{steps.generate-output.outputs.result}}" >> $GITHUB_STEP_SUMMARY
          echo -e "<a href="${{needs.cypress-run.outputs.dashboardUrl}}">View Run in Dashboard</a>" >> $GITHUB_STEP_SUMMARY
