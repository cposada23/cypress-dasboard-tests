name: Cypress tests

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      project-id:
        required: true
        type: string
      env-url:
        required: true
        type: string
    secrets:
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY}}

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    outputs:
      dashboardUrl: ${{steps.cypress-tests.outputs.dashboardUrl}}
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run #of copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install
        run: yarn
      - name: Code style
        run: yarn lint
      - name: setupEnvs
        id: envs
        working-directory: ./cypress
        run: |
          pwd
          ls -la
          echo "::set-output name=number::hiku"
          cypress='hola'
          echo "::set-output name=ORG_ID::${cypress}"
          echo "::set-output name=projectId::${{ inputs.project-id }}"
          echo "project id: :${{ inputs.project-id }}"
      - name: UI E2E Tests
        uses: cypress-io/github-action@v4
        id: cypress-tests
        continue-on-error: true
        env:
          CYPRESS_apiPort: 4222
          CYPRESS_container: ${{ matrix.containers }}
          CYPRESS_USER: 'HEHEHEHEHE'
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_NUMBER: ${{steps.envs.outputs.number}}
          CYPRESS_ORG_ID: ${{steps.envs.outputs.ORG_ID}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_TEST: 9876
          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}
          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}
        with:
          config-file: cypress.config.ts
          install-command: yarn --immutable
          browser: chrome
          headless: true
          record: true
          parallel: true
          group: 'Runs'
          config: baseUrl=${{ inputs.env-url }},projectId=${{ inputs.project-id }}
      # - name: generate output files
      #   if: steps.cypress-tests.outcome == 'failure'
      #   working-directory: ./cypress/results
      #   run: |
      #     touch test-result${{matrix.containers}}.md
      #     echo "### Hello world! :rocket:" >> test-result${{matrix.containers}}.md
      #     echo "There must be a new file"
      # - uses: actions/github-script@v6
      #   if: steps.cypress-tests.outcome == 'failure'
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       var files = fs.readdirSync('./cypress/results/');
      #       const { execSync } = require('child_process');
      #       const output = execSync('ls', { encoding: 'utf-8' });
      #       console.log('The output is:');
      #       console.log(output);
      #       console.log(files);
      - name: print dashboard url
        run: |
          echo "${{steps.envs.outputs.projectId}}"
          echo "DASHBOARD URL"
          echo "${{steps.cypress-tests.outputs.dashboardUrl}}"
      - name: consolidate
        uses: actions/upload-artifact@v3
        # if: always()
        if: steps.cypress-tests.outcome == 'failure'
        # run: |
        #   ls -la ./cypress/results
        #   echo result for ${{ matrix.containers }} ${{ steps.cypress-tests.outcome }}
        #   echo $GITHUB_STEP_SUMMARY
        with:
          name: mochawesome
          path: cypress/results
      # - uses: actions/cache@v2
      #   id: restore-build
      #   with:
      #     path: ./*
      #     key: ${{ github.sha }}

  teams-notifications:
    runs-on: ubuntu-latest
    name: Test Results
    needs: [cypress-run]
    steps:
      # - uses: actions/cache@v2
      #   id: restore-build
      #   with:
      #     path: ./*
      #     key: ${{ github.sha }}
      # - run: ls -R
      - uses: actions/download-artifact@v3
        with:
          name: mochawesome
          path: artifact/
      - run: ls -R
      - uses: actions/github-script@v6
        id: generate-output
        with:
          script: |
            const fs = require('fs');
            let template = `
            <table>
              <tr>
                <th>Spec File</th>
                <th>Passed :white_check_mark:</th>
                <th>Failed :x:</th>
                <th>Skipped :leftwards_arrow_with_hook:</th>
              </tr>
              <tr>
                <td>%spec-file%</td>
                <td>%passed%</td>
                <td>%failed%</td>
                <td>%skipped%</td>
              </tr>
            </table>
            `
            let result = '<h2>Cypress Results</h2>';
            try {
              // If there is files here is because a test failed
              const files = fs.readdirSync('./artifact');
              files.forEach(file => {
                console.log(`File: ${file}`);
                const jsonFile = JSON.parse(fs.readFileSync(`./artifact/${file}`));
                const spec = jsonFile['results'][0]['file'];
                const failures = (jsonFile['results'][0]['suites'][0]['failures']).length;
                if(failures > 0) {
                  const passes = (jsonFile['results'][0]['suites'][0]['passes']).length;
                  const skipped = (jsonFile['results'][0]['suites'][0]['skipped']).length;
                  result += template
                            .replace('%spec-file%', spec)
                            .replace('%passed%', passes)
                            .replace('%failed%', failures)
                            .replace('%skipped%', skipped);
                }  
              });
            } catch (error) {
              console.error(error);
              result += '<br><h3>Passed :white_check_mark:</h3>';
            }
            return result.replace(/[\r\n]/gm, '');
          result-encoding: string
      - name: generate summary
        run: |
          echo "CYPRESS DASHBOARD: ${{needs.cypress-run.outputs.dashboardUrl}}"
          echo -e "${{steps.generate-output.outputs.result}}" >> $GITHUB_STEP_SUMMARY
          echo -e "<a href="${{needs.cypress-run.outputs.dashboardUrl}}">View Run in Dashboard</a>" >> $GITHUB_STEP_SUMMARY

      # - name: other way
      #   working-directory: ./artifact
      #   run: |
      #     echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
      #     echo ${{steps.generate-output.outputs.result}} >> $GITHUB_STEP_SUMMARY
      #     for filename in $(ls test-result*.md); do
      #       echo "FILENAME"
      #       echo $filename
      #       echo "CAT"
      #       content=`cat "$filename"`
      #       echo $filename >> $GITHUB_STEP_SUMMARY
      #       echo $content >> $GITHUB_STEP_SUMMARY
      #     done;
      # - name: list files and store them
      #   working-directory: ./artifact
      #   id: finding-files
      #   run: |
      #     files=(*)
      #     echo "${files[@]}"
      #     for file in "${files[@]}"; do
      #       echo "##########################"
      #       echo "$file"
      #       content=`cat "$file"`
      #       echo "STATSSSSSSSSSJLJDLAKSJDLAKJDFKLÑAJFHLIUEHLKJSDNVLÑIKASDJUFGHUÑKLSEHKOÑSWDEUIH"
      #       echo $content | jq  -r '.stats'
      #       echo "##########################"
      #       echo "RESULTSSSSSSS"
      #       echo $content | jq -r '.results[0]| .file'
      #       echo "##########################"
      #       echo "FAILINGSSSSSS"
      #       echo $content | jq -r '.results[0]| .suites[0] | .failures'
      #       echo "##########################"
      #     done
      # echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
      # - name: Generate list using Markdown
      #   run: |
      # echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
      #     echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
      #     echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
      #     echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
      #     echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY
  #   steps:
  #     - name: Print Dashboard URL
  #       run: |
  #         echo Cypress finished with: ${{  needs.cypress-run.outcome }}
  #         echo Cypress finished with: steps.cypress-tests.outcome
  #         echo See results at ${{ needs.cypress-run.outputs.results }}
  #         echo See results at ${{ needs.cypress-run.outputs.results.dashboardUrl }}
  #         echo See results at ${{ steps.cypress-tests.outputs.dashboardUrl }}

# echo ${{ steps.finding-files.outputs.FILELIST }}
