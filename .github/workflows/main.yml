name: Continuous integration

on:
  push:
    branches:
      - test-dashboard

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run #of copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install
        run: yarn
      - name: Code style
        run: yarn lint
      - name: setupEnvs
        id: envs
        working-directory: ./cypress
        run: |
          pwd
          ls -la
          echo "::set-output name=number::hiku"
          cypress='hola'
          echo "::set-output name=ORG_ID::${cypress}"
          echo "::set-output name=projectId::${{ secrets.PROJECT_ID }}"
          echo "project id: :${{ secrets.PROJECT_ID }}"
      - name: UI E2E Tests
        uses: cypress-io/github-action@v4
        id: cypress-tests
        continue-on-error: true
        env:
          CYPRESS_apiPort: 4222
          CYPRESS_container: ${{ matrix.containers }}
          CYPRESS_USER: 'HEHEHEHEHE'
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_NUMBER: ${{steps.envs.outputs.number}}
          CYPRESS_ORG_ID: ${{steps.envs.outputs.ORG_ID}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_TEST: 9876
          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}
          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}
        with:
          config-file: cypress.config.ts
          install-command: yarn --immutable
          browser: chrome
          headless: true
          record: true
          parallel: true
          group: 'Runs'
          config: baseUrl=https://www.google.com/,projectId=${{steps.envs.outputs.projectId}}
      - name: generate output files
        if: steps.cypress-tests.outcome == 'failure'
        working-directory: ./cypress/results
        run: |
          touch test-result${{matrix.containers}}.md
          echo "### Hello world! :rocket:" >> test-result${{matrix.containers}}.md
          echo "There must be a new file"
      - uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            var files = fs.readdirSync('./cypress/results/');
            const { execSync } = require('child_process');
            const output = execSync('ls', { encoding: 'utf-8' });
            console.log('The output is:');
            console.log(output);
            console.log(files);
      - name: consolidate
        uses: actions/upload-artifact@v3
        # if: always()
        if: steps.cypress-tests.outcome == 'failure'
        # run: |
        #   ls -la ./cypress/results
        #   echo result for ${{ matrix.containers }} ${{ steps.cypress-tests.outcome }}
        #   echo $GITHUB_STEP_SUMMARY
        with:
          name: mochawesome
          path: cypress/results

  teams-notifications:
    runs-on: ubuntu-latest
    name: Integration tests reporter
    needs: [cypress-run]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: mochawesome
          path: artifact/
      - run: ls -R
      - name: other way
        working-directory: ./artifact
        run: |
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          for filename in $(ls test-result*.md); do
            echo "FILENAME"
            echo $filename
            echo "CAT"
            content=`cat "$filename"`
            echo $filename >> $GITHUB_STEP_SUMMARY
            echo $content >> $GITHUB_STEP_SUMMARY
          done;
      # - name: list files and store them
      #   working-directory: ./artifact
      #   id: finding-files
      #   run: |
      #     files=(*)
      #     echo "${files[@]}"
      #     for file in "${files[@]}"; do
      #       echo "##########################"
      #       echo "$file"
      #       content=`cat "$file"`
      #       echo "STATSSSSSSSSSJLJDLAKSJDLAKJDFKLÑAJFHLIUEHLKJSDNVLÑIKASDJUFGHUÑKLSEHKOÑSWDEUIH"
      #       echo $content | jq  -r '.stats'
      #       echo "##########################"
      #       echo "RESULTSSSSSSS"
      #       echo $content | jq -r '.results[0]| .file'
      #       echo "##########################"
      #       echo "FAILINGSSSSSS"
      #       echo $content | jq -r '.results[0]| .suites[0] | .failures'
      #       echo "##########################"
      #     done
      # echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
      # - name: Generate list using Markdown
      #   run: |
      # echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
      #     echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
      #     echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
      #     echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
      #     echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
      #     echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY
  #   steps:
  #     - name: Print Dashboard URL
  #       run: |
  #         echo Cypress finished with: ${{  needs.cypress-run.outcome }}
  #         echo Cypress finished with: steps.cypress-tests.outcome
  #         echo See results at ${{ needs.cypress-run.outputs.results }}
  #         echo See results at ${{ needs.cypress-run.outputs.results.dashboardUrl }}
  #         echo See results at ${{ steps.cypress-tests.outputs.dashboardUrl }}

# echo ${{ steps.finding-files.outputs.FILELIST }}
